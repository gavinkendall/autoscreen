@echo off
set build_dir=%cd%

:: Just in case we executed "autoscreen.exe" here in the build directory let's clean up what the executable created
rmdir /s /q !autoscreen
rmdir /s /q screenshots
del /s /q autoscreen.conf

:: Delete the old EXE and MSI
del /s /q autoscreen.exe
del /s /q AutoScreenCaptureSetup.msi

:: Clean up what could be remaining in the "..\bin\Release" directory from a previous build
del /s /q ..\bin\Release\*.*
rmdir /s /q ..\bin\Release\!autoscreen
rmdir /s /q ..\bin\Release\screenshots

:: Let's build the Auto Screen Capture application!
devenv ..\autoscreen_vs2019.sln /Project ..\AutoScreenCapture.csproj /Build Release

:: Make sure to sign the assemblies so we can play nicely with Windows Defender
signtool sign /f ..\autoscreen.pfx /p Sonic2020! /fd SHA256 ..\bin\Release\AutoScreenCapture.exe
signtool sign /f ..\autoscreen.pfx /p Sonic2020! /fd SHA256 ..\bin\Release\Renci.SshNet.dll
signtool sign /f ..\autoscreen.pfx /p Sonic2020! /fd SHA256 ..\bin\Release\Gavin.Kendall.SFTP.dll

:: Use the "AutoScreenCapture.exe" executable and its associated DLLs to merge them all into a single executable named "autoscreen.exe"
ILMerge ..\bin\Release\AutoScreenCapture.exe /out:..\bin\Release\autoscreen.exe ..\bin\Release\Renci.SshNet.dll ..\bin\Release\Gavin.Kendall.SFTP.dll

:: This is necessary to get around a weird error with Visual Studio when building the installation package
if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\VSI\DisableOutOfProcBuild\DisableOutOfProcBuild.exe" (
    cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\VSI\DisableOutOfProcBuild\"
    DisableOutOfProcBuild.exe
    cd %build_dir%
)

:: Let's build the installer! This relies on autoscreen.exe, autoscreen.conf, and autoscreen.ico
:: autoscreen.exe should be the portable version of Auto Screen Capture (since it has its DLLs merged into the executable)
:: autoscreen.conf is included so we can have Auto Screen Capture write its data files to the user's local AppData directory
:: autoscreen.ico is required by the shortcuts placed on the Desktop and in the Start menu
devenv ..\autoscreen_vs2019.sln /Project ..\AutoScreenCaptureSetup\AutoScreenCaptureSetup.vdproj /Build Release

:: Clean up what we no longer need. At this point the AutoScreenCaptureSetup installer project should
:: be using the "autoscreen.exe" executable that was generated by ILMerge so we don't need the dependencies
:: such as the DLLs "Gavin.Kendall.SFTP.dll" and "Reci.SshNet.dll" as we want to make "autoscreen.exe" portable
del ..\bin\Release\autoscreen.pdb
del ..\bin\Release\autoscreen.conf
del ..\bin\Release\AutoScreenCapture.exe
del ..\bin\Release\AutoScreenCapture.exe.config
del ..\bin\Release\Gavin.Kendall.SFTP.dll
del ..\bin\Release\Gavin.Kendall.SFTP.pdb
del ..\bin\Release\Renci.SshNet.dll
del ..\bin\Release\Renci.SshNet.xml
del ..\AutoScreenCaptureSetup\Release\setup.exe

:: Grab the EXE and the MSI from their respective Release directories and move them here to the "build" directory
move ..\bin\Release\autoscreen.exe .
move ..\AutoScreenCaptureSetup\Release\AutoScreenCaptureSetup.msi .

:: We want to sign the EXE and the MSI so that Windows Defender accepts them as being safe binaries to download
signtool sign /f ..\autoscreen.pfx /p Sonic2020! /fd SHA256 autoscreen.exe
signtool sign /f ..\autoscreen.pfx /p Sonic2020! /fd SHA256 AutoScreenCaptureSetup.msi
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoScreenCapture.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AutoScreenCapture.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _lock {
            get {
                object obj = ResourceManager.GetObject("lock", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap about {
            get {
                object obj = ResourceManager.GetObject("about", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap about_0 {
            get {
                object obj = ResourceManager.GetObject("about_0", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap about_1 {
            get {
                object obj = ResourceManager.GetObject("about_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap about_2 {
            get {
                object obj = ResourceManager.GetObject("about_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap about_3 {
            get {
                object obj = ResourceManager.GetObject("about_3", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap about_4 {
            get {
                object obj = ResourceManager.GetObject("about_4", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap add {
            get {
                object obj = ResourceManager.GetObject("add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap application_add {
            get {
                object obj = ResourceManager.GetObject("application_add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon autoscreen {
            get {
                object obj = ResourceManager.GetObject("autoscreen", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] autoscreen_conf {
            get {
                object obj = ResourceManager.GetObject("autoscreen_conf", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon autoscreen_error {
            get {
                object obj = ResourceManager.GetObject("autoscreen_error", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon autoscreen_running_not_optimized {
            get {
                object obj = ResourceManager.GetObject("autoscreen_running_not_optimized", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon autoscreen_running_optimized {
            get {
                object obj = ResourceManager.GetObject("autoscreen_running_optimized", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon autoscreen_warning {
            get {
                object obj = ResourceManager.GetObject("autoscreen_warning", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap brick {
            get {
                object obj = ResourceManager.GetObject("brick", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap capture_archive {
            get {
                object obj = ResourceManager.GetObject("capture_archive", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap capture_edit {
            get {
                object obj = ResourceManager.GetObject("capture_edit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Consolas;}{\f2\fnil\fcharset0 Consolas;}{\f3\fnil\fcharset2 Symbol;}}
        ///{\colortbl ;\red0\green0\blue0;}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Changelog\b0\fs22\par
        ///Who reads these things?\par
        ///This is where I keep track of the application&apos;s changes. You&apos;re going to find major releases divided into specific versions and code-named as Legacy (1.0), Phoeni [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string changelog {
            get {
                return ResourceManager.GetString("changelog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap command_line {
            get {
                object obj = ResourceManager.GetObject("command_line", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Consolas;}}
        ///{\colortbl ;\red255\green255\blue255;\red0\green0\blue0;}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Command Line\b0\par
        ///\fs22 Auto Screen Capture can be controlled from a command line terminal such as Command Prompt (cmd.exe) or Windows PowerShell (powershell.exe) depending on what you prefer to use.\par
        ///Simply running &quot;autoscreen.exe&quot; without c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string command_line1 {
            get {
                return ResourceManager.GetString("command_line1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Common Setup Scenarios\b0\fs22\par
        ///You want Auto Screen Capture to not show its interface on startup:\par
        ///
        ///\pard 
        ///{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
        ///\fi-360\li720\sa200\sl276\slmult1 Go to the Triggers module\par
        ///{\pntext\f0 2.\tab}Click on the green square for the &quot;Show Interface on Start [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string common_setup_scenarios {
            get {
                return ResourceManager.GetString("common_setup_scenarios", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Consolas;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Configuration File\b0\par
        ///\fs22 Auto Screen Capture comes with its own configuration file named &quot;autoscreen.conf&quot; that is usually found in the same folder as &quot;autoscreen.exe&quot;.\par
        ///{\pict{\*\picprop}\wmetafile8\picw10742\pich3281\picwgoal6090\pichgoal1860 
        ///010009000003b827010000009927010000000400000003010 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string configuration_file {
            get {
                return ResourceManager.GetString("configuration_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap configure {
            get {
                object obj = ResourceManager.GetObject("configure", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap delete {
            get {
                object obj = ResourceManager.GetObject("delete", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Consolas;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Dynamic Regex Validator\b0\par
        ///
        ///\pard\sa200\sl240\slmult1\fs22 This tool is useful for testing regular expressions.\par
        ///Enter your regular expression in the &quot;Regular Expression&quot; field and a test value in the &quot;Test Value&quot; field. Modify either the regex or the test value and watch the colors and status of  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dynamic_regex_validator {
            get {
                return ResourceManager.GetString("dynamic_regex_validator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap edit {
            get {
                object obj = ResourceManager.GetObject("edit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Editors\b0\fs22\par
        ///The &quot;Editors&quot; module gives you the ability to add, configure, and remove applications and/or scripts that are used by Auto Screen Capture to edit or open screenshots. For example, you could have a screenshot opened by a PowerShell script or an application (such as Clip Studio Paint or GIMP).\par
        ///
        ///\pard\sa200\sl240 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string editors {
            get {
                return ResourceManager.GetString("editors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap email {
            get {
                object obj = ResourceManager.GetObject("email", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap exit {
            get {
                object obj = ResourceManager.GetObject("exit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap file_transfer {
            get {
                object obj = ResourceManager.GetObject("file_transfer", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Getting Started\fs22\par
        ///
        ///\pard\sa200\sl240\slmult1\b0 Check what will be captured before starting a screen capture session by making sure that the Preview button is enabled.\par
        ///You should then see a real-time preview when looking at the tab named &quot;Dashboard&quot; or any of the tabs to the right of the Dashboard tab.\par
        ///The Preview but [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string getting_started {
            get {
                return ResourceManager.GetString("getting_started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap help {
            get {
                object obj = ResourceManager.GetObject("help", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap keyboard {
            get {
                object obj = ResourceManager.GetObject("keyboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\colortbl ;\red0\green0\blue255;}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\f0\fs22\lang9                     GNU GENERAL PUBLIC LICENSE\par
        ///                       Version 3, 29 June 2007\par
        ///\par
        /// Copyright (C) 2007 Free Software Foundation, Inc. &lt;{{\field{\*\fldinst{HYPERLINK &quot;https://fsf.org/&quot;}}{\fldrslt{https://fsf.org/\ul0\cf0}}}}\f0\fs22 &gt;\par
        /// Everyone is permitted to copy and distribute verb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string license {
            get {
                return ResourceManager.GetString("license", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap lightbulb {
            get {
                object obj = ResourceManager.GetObject("lightbulb", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Macro Tags\b0\fs22\par
        ///The &quot;Macro Tags&quot; module gives you the ability to add, configure, and remove macro tags.\par
        ///A macro tag can be included in the filename and acquires certain information based on what type of macro tag is being used. You could, for example, acquire the current time with the %time% macr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string macro_tags {
            get {
                return ResourceManager.GetString("macro_tags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap openfolder {
            get {
                object obj = ResourceManager.GetObject("openfolder", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap properties {
            get {
                object obj = ResourceManager.GetObject("properties", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Quick Start\fs22\par
        ///\b0 This is for people who don&apos;t want to read through the longer &quot;Getting Started&quot; help section and just want to jump straight into using the application so the information in this section is intentionally very short and basic.\par
        ///There are two recommended ways to begin using Auto Screen Capture depending on how  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string quick_start {
            get {
                return ResourceManager.GetString("quick_start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap refresh {
            get {
                object obj = ResourceManager.GetObject("refresh", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap region {
            get {
                object obj = ResourceManager.GetObject("region", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Regions\b0\fs22\par
        ///The &quot;Regions&quot; module gives you the ability to add, configure, and remove multiple regions. A region represents an area of a screen and will always be defined by its X, Y, Width, and Height values.\par
        ///
        ///\pard\sa200\sl240\slmult1\par
        ///\par
        ///
        ///\pard\sa200\sl276\slmult1\b Adding Regions\b0\par
        ///To add a new Region cli [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string regions {
            get {
                return ResourceManager.GetString("regions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap schedule {
            get {
                object obj = ResourceManager.GetObject("schedule", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\colortbl ;\red255\green0\blue0;}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Schedules\b0\fs22\par
        ///The &quot;Schedules&quot; module gives you the ability to add, configure, and remove schedules that define when screenshots should be taken between a time period (and what screens and regions should be captured during the running schedule).\par
        ///\par
        ///\par
        ///\b Adding Schedules\b0\par
        ///To  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string schedules {
            get {
                return ResourceManager.GetString("schedules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap screen {
            get {
                object obj = ResourceManager.GetObject("screen", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl240\slmult1\b\f0\fs28\lang9 Screens\b0\fs22\par
        ///The &quot;Screens&quot; module shows you what displays you may have available. Each &quot;Screen&quot; that is created on the first run of Auto Screen Capture will be configured to adapt to your display setup and may not be an accurate representation of your current display setup. For example, if you see five screens listed [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string screens {
            get {
                return ResourceManager.GetString("screens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap setup {
            get {
                object obj = ResourceManager.GetObject("setup", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap space_cat_wallpaper {
            get {
                object obj = ResourceManager.GetObject("space_cat_wallpaper", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap start_screen_capture {
            get {
                object obj = ResourceManager.GetObject("start_screen_capture", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap stop_screen_capture {
            get {
                object obj = ResourceManager.GetObject("stop_screen_capture", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tools {
            get {
                object obj = ResourceManager.GetObject("tools", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap trigger {
            get {
                object obj = ResourceManager.GetObject("trigger", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Triggers\b0\fs22\par
        ///The &quot;Triggers&quot; module gives you the ability to add, configure, and remove triggers.\par
        ///A trigger controls the behaviour of Auto Screen Capture by having the application perform a specified action based on a specified condition.\par
        ///
        ///\pard\sa200\sl240\slmult1\par
        ///\par
        ///\b Adding Trig [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string triggers {
            get {
                return ResourceManager.GetString("triggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap unlock {
            get {
                object obj = ResourceManager.GetObject("unlock", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap warning {
            get {
                object obj = ResourceManager.GetObject("warning", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        ///{\colortbl ;\red0\green0\blue255;}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Welcome\fs22\par
        ///\b0 Auto Screen Capture takes screenshots at a set interval. The application is primarily used as a personal automated screen capture utility for keeping track of what you&apos;re working on or if you&apos;re needing a way to have screenshots already available to you without having [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string welcome {
            get {
                return ResourceManager.GetString("welcome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Consolas;}}
        ///{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
        ///\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 What&apos;s New\b0\par
        ///\fs22 Auto Screen Capture 2.5 (&quot;Limoncello&quot;) includes a number of new features.\par
        ///\par
        ///\par
        ///\b Enhanced Configuration File Format (&quot;autoscreen.conf&quot;)\b0\par
        ///You can now define your own default Screens, Regions, Editors, Schedules, Macro Tags, and Triggers in the &quot;autoscreen.conf&quot; fi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string whats_new {
            get {
                return ResourceManager.GetString("whats_new", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap zoom_in {
            get {
                object obj = ResourceManager.GetObject("zoom_in", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap zoom_out {
            get {
                object obj = ResourceManager.GetObject("zoom_out", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
